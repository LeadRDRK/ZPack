                       ZPack
                File Specifications
                v1.0.0 (16/04/2021)
  Copyright (c) 2021 LeadRDRK. All rights reserved.
  Everyone is permitted to copy and distribute this
  document in any form. External modifications are
  welcome but must not be misrepresented as the 
  original document.
-----------------------------------------------------

Definitions
------------
  "The Program" refers to any code that is written to
  handle this file format.

  "The Archive" refers to ZPack-formatted files.

  "CDR" and "EOCDR" are abbreviations for "central directory
  record" and "end of central directory record", respectively.

Synopsis
---------
  ZPack is a simple, general-purpose archive file
  format with lossless data compression.
  
  It exclusively uses the Zstandard compression algorithm
  for file compression (hence the name).

  The file extension for ZPack-formatted files is .zpk
  
General archive structure
--------------------------
  [ZPack header]
  [File data 1]
  [File data 2]
  ...
  [File data n]
  [Central directory record]
  [End of central directory record]
  
  All field values are unsigned integers stored in
  little-endian byte order unless specifically noted.

ZPack header
-------------
  Field                      Size     Description
  -------------------------  -------  ------------
  signature                  4 bytes  ZPack header signature (0x5a504b15)
  archive version            2 bytes  The archive's version.
  
  Starting from version 1.0.0, the archive's version is
  the revision number. For example, version 1.0.0 is 0,
  but version 2.0.0 might be 21 if there has been 21 other
  versions that came before it.

File data
----------
  This is the file's compressed data. It contains
  one or more Zstandard frames (and skippable frames)
  For more information, refer to the Zstandard
  compression format specification.

Central directory record
-------------------------
  A central directory record is a collection of
  multiple file records and follows the following
  format:
  
  Field                      Size     Description
  -------------------------  -------  ------------
  signature                  4 bytes  ZPack CDR signature (0x5a504b14)
  [file record 1]
  [file record 2]
  ...
  [file record n]
  
File record
------------
  Contains information about a file.
  The filename follows a specific set of rules; see the
  "File naming rules" section below.

  Field                      Size     Description
  -------------------------  -------  ------------
  filename length (n)        2 bytes  Length of the filename.
  filename                   n bytes  UTF-8 formatted string representing
                                      the file's name.
  file offset                8 bytes  Offset of the file's data from the
                                      start of the archive.
  compressed size            8 bytes  The file's compressed size.
  uncompressed size          8 bytes  The file's uncompressed size.
  file hash (crc32)          4 bytes  CRC32 digest of the file.

End of central directory record
--------------------------------
  Because the file data section is of a variable size,
  an end of central directory record is needed to determine
  the offset of the central directory record.

  Field                      Size     Description
  -------------------------  -------  ------------
  signature                  4 bytes  The ZPack EOCDR signature (0x5a504b13)
  CDR offset                 8 bytes  Offset of the CDR from the start of
                                      the archive. 

File naming rules
-----------------
  The filename can be a path (e.g. path/to/file).
  However, it must not be relative to any directory,
  either in the archive or in the user's filesystem.

  For example, these filenames are considered illegal:
  * .
  * ..
  * path/../to/file
  * ../path/to/file
  * path/./to/file
  * ./path/to/file

  The path may contain forward slashes (/) or backward
  slashes (\) depending on the filesystem/operating
  system that the archive was created on. The program
  itself must handle these seperators accordingly.

  The max filename length is 65535 characters (as per
  the max value of an unsigned 16-bit integer)
  